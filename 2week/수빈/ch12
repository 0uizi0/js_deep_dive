# 함수

## 12.1 함수란?

- 함수 : 일련의 과정을 문으로 구현하고 코드 블록으로 감싸서 하나의 실행단위로 정의한 것
- 함수는 값이며 여러개 존재할 수 있다.
- 용어 정리

  - 매개변수 : 함수 내부로 입력을 전달받는것
  - 인수 : 입력
  - 반환값 : 출력
  - 함수이름 : 함수 구분 식별자 (함수 여러개 존재하기 때문에 식별자가 필요하다)
  - 함수 정의 : 정의를 통해 함수 생성

    - 함수선언문, 함수 표현식, Function 생성자 함수, 화살표 함수

  - 함수호출 : 함수가 실행됨. 코드 블록에 담긴 문들이 일괄적으로 실행하고 실행결과인 반환값을 반환함

## 12.2 함수를 사용하는 이유

- 코드의 재사용 : 여러번 함수 호출 시 재사용성 높음

  - 코드 중복을 억제
  - 유지보수 편의성 높임
  - 코드의 신뢰성 향상

- 코드 가독성 향상
  - 코드는 개발자를 위한 문서이므로 함수 이름은 가독성있게 지어야 한다.
    - 함수는 객체 타입의 값이다. > 식별자 붙이기 가능

## 12.3 함수 리터럴

- 함수는 객체 타입의 값이다. > 함수 리터럴로 함수 생성 가능
  - 구성
    - function 키워드
    - 함수이름
      - 식별자 네이밍 규칙 준수
      - 함수 몸체내에서만 참조할 수 있음
      - 생략 가능 = 익명함수 ( 이름이 있으면 기명함수 )
    - 매개변수목록
      - 0개 이상의 매개변수 존재, 쉼표구분
      - 순서가 중요 : 함수 호출시 지정한 인수가 순서대로 할당
      - 함수 몸체에서는 변수와 동일하게 취급 > 식별자네이밍규칙 준수
    - 함수 몸체
      - 함수 호출시 일괄적으로 실행될 문을 실행단위로 정의한 코드 블록
      - 함수 호출시에 실행
- 변수 할당 가능 : 함수 리터럴을 변수에 할당함
  ```js
  const func = function (x, y) {
    return x + y;
  };
  ```
  - 리터럴은 값을 생성하기 위한 표기법 > 생성된 값은 객체 > 함수는 객체
  - 그러나 일반객체와 다름 :
    - 일반객체는 호출 불가능, 함수는 가능
    - 함수객체만의 고유 프로퍼티 있음

## 12.4 함수 정의

- 호출하기 이전에 인수를 전달받을때 매개변수, 실행할문, 반환할 값 지정하는 것
- 정의된 함수가 자바스크립트 엔진에 의해 평가되서 함수 객체가 됨
- 변수 선언과 함수 정의 :
  - 변수는 선언
  - 함수는 정의 : 함수 선언문 평가시 식별자가 암묵적으로 생성되고 함수 객체가 할당됨
- 정의 방법
  - 함수선언문
    ```js
    function add(x, y) {
      return x + y;
    }
    console.dir(add); // f add(x,y) 함수 객체 프로퍼티까지 출력
    console.log(add); // ƒ add(x, y) { return x + y; } 함수 전체 출력
    console.log(add(1, 2)); // 3
    ```
    - 함수리터럴과 형태 동일, 단 이름 생략 안됨 (리터럴은 이름생략 가능)
    - 표현식이 아닌 문 : 따라서 위 함수 선언문 자체를 콘솔로그에 찍으면 undefined 나옴. 표현식이라면 값이 나와야함. > 즉 변수 할당이 불가능
      - 그러나!!!! 아래와 같이 할당이 되어 보이는 이유는 기명함수 리터럴이 중의적인 표현이기 때문.
        ```js
        var add = function add(x, y) {
          return x + y;
        };
        ```
      - 자바스크립트 엔진에서 밑에 선언문을 함수 리터럴 표현식으로 해석 => 문맥에 따라 중의적으로 해석함.
      - 중의적 표현 예시
        - ex) {} 중괄호 : 블록문 or 객체 리터럴
        - ex) 기명함수 : 함수 선언문(표현식X) or 함수 리터럴 (표현식 O)
      - 기명함수의 중의적 표현으로 인해 함수 생성되는 것은 동일하나 생성하는 내부 동작에 차이가 있음
        - `(function add(x, y) {
  return x + y;
})` : () 그룹 연산자 안에 함수리터럴 입력 시 선언문으로 해석X, 리터럴표현으로 해석 <br/> => 그룹연산자안에는 값으로 평가가능한 표현식이어야함.
      - 호출 차이 : 리터럴로 생성된 식별자는 호출 불가능 / 함수선언문으로 생성된 식별자 호출 가능 
        - 리터럴 : 함수이름은 함수 몸체에서만 참조 가능 따라서 함수리터럴로 생성됨 함수에서는 함수이름으로 호출 불가능하다.
        - 함수선언문 : 함수 이름을 암묵적으로 식별자로 생성함 
          - 자바스크립트 엔진이 선언문 해석하여 함수객체 생성 > 함수이름은 몸체내부에서만 유효한 식별자로 이름과 별도로 함수객체를 가리키는 식별자가 필요(식별자가 없으면 함수객체 참조나 호출이 불가능) > 암묵적으로 함수이름과 동일한 식별자 생성하고 함수 객체 할당
          - 함수이름(addName)으로 호출하는것이 아닌 함수 객체를 가리키는 식별자(add)로 호출
            ```js
            var add = function addName() {~~}
            ```
      - 정리 :: 함수 선언문을 함수 표현식으로 변환해 함수 객체를 생성한다고 생각.. (동작이 동이하지는 않음)
  - 함수 표현식
    ```js
    var add = function (x, y) {
      return x + y;
    };
    ```
    * 일급객체 : 값처럼 변수 할당, 프로퍼티 값 가능,  배열의 요소도 가능 등 값의 성질을 갖는 객체
  - Function 생성자 함수
    ```js
    var add = new Function("x", "y", "return x + y");
    ```
  - 화살표 함수
    ```js
    var add = (x, y) => x + y;
    ```

## 이야기해보고 싶은 내용

### p.156

> 함수는 객체 타입의 값이다.

반환값이 없는 함수는 값이 아니지 않나?

### p.157

> 표 12-1 에서 함수 몸체 설명의 부분의 <br/>
> "함수 호출시 일괄적으로 실행될 문을 실행단위로 정의한 코드 블록"

실행단위가 뭘까?

### p.159

> function add(x, y) {

      return x + y;
    }

함수 선언문은 표현식이 아니라서 콘솔에 찍으면 값이 안나온다고 했는데 add(1,3) 은 표현식이라서 나오는건가?
